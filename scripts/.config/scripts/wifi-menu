#!/usr/bin/env bash

# Check dependencies
command -v nmcli >/dev/null 2>&1 || { notify-send -i error "Error" "nmcli not found."; exit 1; }
command -v rofi >/dev/null 2>&1 || { notify-send -i error "Error" "rofi not found."; exit 1; }

# Icons
SCAN_ICON="Scan"
WIFI_ON_ICON="Disable Wi-Fi"
WIFI_OFF_ICON="Enable Wi-Fi"
CHECKMARK_ICON="> "
DISCONNECT_ICON="Disconnect"

# Find Wi-Fi interface
wifi_interface=$(nmcli device | grep wifi | awk '{print $1}' | head -n1)
[[ -z "$wifi_interface" ]] && { notify-send -i network-error "Error" "No Wi-Fi interface found."; exit 1; }

# Check Wi-Fi status
wifi_status=$(nmcli radio wifi)
TOGGLE_WIFI=$([[ "$wifi_status" == "enabled" ]] && echo "$WIFI_ON_ICON" || echo "$WIFI_OFF_ICON")

# Get currently connected SSID
connected_ssid=$(nmcli -t -f GENERAL.CONNECTION device show "$wifi_interface" | cut -d':' -f2)

# Build SSID list
declare -A seen_ssids
ssid_menu=()
ssid_raw=()

while IFS=':' read -r ssid signal _; do
    [[ -z "$ssid" || "$ssid" == "--" ]] && continue
    [[ -n "${seen_ssids[$ssid]}" ]] && continue
    seen_ssids["$ssid"]=1

    if (( signal == 100 )); then
        icon="󰤨 "
    elif (( signal >= 76 )); then
        icon="󰤥 "
    elif (( signal >= 51 )); then
        icon="󰤢 "
    elif (( signal >= 26 )); then
        icon="󰤟 "
    else
        icon="󰤯 "
    fi

    display_ssid="$icon $ssid"
    [[ "$ssid" == "$connected_ssid" ]] && display_ssid="$CHECKMARK_ICON $icon $ssid"

    ssid_menu+=("$display_ssid")
    ssid_raw+=("$ssid")
done < <(nmcli -t -f SSID,SIGNAL device wifi list --rescan no)

# Final menu
menu_items=("$TOGGLE_WIFI" "$SCAN_ICON")
[[ -n "$connected_ssid" ]] && menu_items+=("$DISCONNECT_ICON")
menu_items+=("${ssid_menu[@]}")
selection=$(printf '%s\n' "${menu_items[@]}" | rofi -dmenu -p "Network Manager:" -theme-str '* { font: "JetBrainsMono Nerd Font 13.5"; } inputbar { enabled: false; } listview { spacing: 3px; } mainbox { children: [listview]; } window { width: 350px; height: 450; location: northeast; anchor: northeast; x-offset: -5; y-offset: 5; background-color: #1e1e20; border: 2px; border-color: #404040; }' )

# Handle selection
case "$selection" in
    "$SCAN_ICON")
        nmcli device wifi rescan
        exec "$0"
        ;;
    "$WIFI_ON_ICON")
        nmcli radio wifi off
        exit
        ;;
    "$WIFI_OFF_ICON")
        nmcli radio wifi on
        exec "$0"
        ;;
    "$DISCONNECT_ICON")
        nmcli device disconnect "$wifi_interface"
        notify-send -i network-wireless-disconnected "Disconnected" "Disconnected from $connected_ssid."
        exit
        ;;
    "")
        exit
        ;;
    *)
        match_index=-1
        for i in "${!ssid_menu[@]}"; do
            if [[ "${ssid_menu[$i]}" == "$selection" ]]; then
                match_index=$i
                break
            fi
        done

        [[ $match_index -eq -1 ]] && { notify-send -i network-error "Error" "Could not find SSID match."; exit 1; }

        ssid_selected="${ssid_raw[$match_index]}"

        if nmcli connection show "$ssid_selected" > /dev/null 2>&1; then
            nmcli connection up "$ssid_selected" && {
                notify-send -i network-wireless-connected "Connected" "Successfully connected to $ssid_selected."
                            exit
                        }
        fi

        password=$(rofi -dmenu -p "Enter Password for $ssid_selected:" -password)
        [[ -z "$password" ]] && { notify-send -i network-error "Connection Failed" "Password required."; exit 1; }

        nmcli device wifi connect "$(printf '%q' "$ssid_selected")" password "$(printf '%q' "$password")" && {
            notify-send -i network-wireless-connected "Connected" "Successfully connected to $ssid_selected."
                    exit
                } || {
                    notify-send -i network-error "Connection Failed" "Failed to connect to $ssid_selected."
                                    exit 1
                                }
                            ;;
                    esac
