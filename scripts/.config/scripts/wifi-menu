#!/usr/bin/env bash

# Check dependencies
command -v nmcli >/dev/null 2>&1 || { notify-send -i error "Error" "nmcli not found. Please install NetworkManager."; exit 1; }
command -v rofi >/dev/null 2>&1 || { notify-send -i error "Error" "rofi not found. Please install rofi."; exit 1; }

# Configuration
CACHE_DIR="$HOME/.cache/wifi_manager"
LAST_SCAN_FILE="$CACHE_DIR/last_scan"
RESCAN_INTERVAL=30  # Seconds before rescan is needed
CONNECTION_TIMEOUT=10  # Seconds to wait for connection

# Icons
SCAN_ICON="Scan Networks"
WIFI_ON_ICON="Disable Wi-Fi"
WIFI_OFF_ICON="Enable Wi-Fi"
CHECKMARK_ICON="> "
DISCONNECT_ICON="Disconnect"
ERROR_ICON=""

# Create cache directory
mkdir -p "$CACHE_DIR"

# Find Wi-Fi interface
wifi_interface=$(nmcli device | grep wifi | awk '{print $1}' | head -n1)
[[ -z "$wifi_interface" ]] && { notify-send -i network-error "Error" "No Wi-Fi interface found."; exit 1; }

# Check Wi-Fi status
wifi_status=$(nmcli radio wifi)
TOGGLE_WIFI=$([[ "$wifi_status" == "enabled" ]] && echo "$WIFI_ON_ICON" || echo "$WIFI_OFF_ICON")

# Get currently connected SSID
connected_ssid=$(nmcli -t -f GENERAL.CONNECTION device show "$wifi_interface" | cut -d':' -f2)
prompt="Network Manager"
[[ -n "$connected_ssid" ]] && prompt="Network Manager (Connected: $connected_ssid)"

# Check if rescan is needed
rescan_needed=0
if [[ -f "$LAST_SCAN_FILE" ]]; then
    last_scan=$(cat "$LAST_SCAN_FILE")
    current_time=$(date +%s)
    if (( current_time - last_scan > RESCAN_INTERVAL )); then
        rescan_needed=1
    fi
else
    rescan_needed=1
fi

# Perform rescan if needed
if [[ $rescan_needed -eq 1 ]]; then
    nmcli device wifi rescan >/dev/null 2>&1
    date +%s > "$LAST_SCAN_FILE"
fi

# Build SSID list sorted by signal strength
declare -A seen_ssids
ssid_menu=()
ssid_raw=()
signal_strength=()

while IFS=':' read -r ssid signal _; do
    [[ -z "$ssid" || "$ssid" == "--" ]] && continue
    [[ -n "${seen_ssids[$ssid]}" ]] && continue
    seen_ssids["$ssid"]=1

    if (( signal == 100 )); then
        icon="󰤨 "
    elif (( signal >= 76 )); then
        icon="󰤥 "
    elif (( signal >= 51 )); then
        icon="󰤢 "
    elif (( signal >= 26 )); then
        icon="󰤟 "
    else
        icon="󰤯 "
    fi

    display_ssid="$icon $ssid"
    [[ "$ssid" == "$connected_ssid" ]] && display_ssid="$CHECKMARK_ICON $icon $ssid"

    ssid_menu+=("$display_ssid")
    ssid_raw+=("$ssid")
    signal_strength+=("$signal")
done < <(nmcli -t -f SSID,SIGNAL device wifi list --rescan no | sort -t: -k2 -nr)

# Final menu
menu_items=("$TOGGLE_WIFI" "$SCAN_ICON")
[[ -n "$connected_ssid" ]] && menu_items+=("$DISCONNECT_ICON")
menu_items+=("${ssid_menu[@]}")
selection=$(printf '%s\n' "${menu_items[@]}" | rofi -dmenu -p "$prompt" -theme-str '* { font: "JetBrainsMono Nerd Font 13.5"; } inputbar { enabled: false; } listview { spacing: 3px; } mainbox { children: [listview]; } window { width: 350px; height: 450; location: northeast; anchor: northeast; x-offset: -5; y-offset: 5; }')

# Handle selection
case "$selection" in
    "$SCAN_ICON")
        rm -f "$LAST_SCAN_FILE"
        exec "$0"
        ;;
    "$WIFI_ON_ICON")
        nmcli radio wifi off
        notify-send -i network-wireless-disconnected "Wi-Fi Disabled" "Wi-Fi has been turned off."
        exit
        ;;
    "$WIFI_OFF_ICON")
        nmcli radio wifi on
        notify-send -i network-wireless-connected "Wi-Fi Enabled" "Wi-Fi has been turned on."
        exec "$0"
        ;;
    "$DISCONNECT_ICON")
        nmcli device disconnect "$wifi_interface" && {
            notify-send -i network-wireless-disconnected "Disconnected" "Disconnected from $connected_ssid."
                    exit
                } || {
                    notify-send -i network-error "Error" "Failed to disconnect from $connected_ssid."
                                    exit 1
                                }
                            ;;
                        "")
                            exit
                            ;;
                        *)
                            match_index=-1
                            for i in "${!ssid_menu[@]}"; do
                                if [[ "${ssid_menu[$i]}" == "$selection" ]]; then
                                    match_index=$i
                                    break
                                fi
                            done

                            [[ $match_index -eq -1 ]] && { notify-send -i network-error "Error" "Could not find SSID match."; exit 1; }

                            ssid_selected="${ssid_raw[$match_index]}"

        # Try connecting to existing profile
        if nmcli connection show "$ssid_selected" >/dev/null 2>&1; then
            if timeout "$CONNECTION_TIMEOUT" nmcli connection up "$ssid_selected"; then
                notify-send -i network-wireless-connected "Connected" "Successfully connected to $ssid_selected."
                exit
            else
                # Delete misconfigured profile and try connecting with a new password
                nmcli connection delete "$ssid_selected"
            fi
        fi

        # Prompt for password
        password=$(rofi -dmenu -p "Enter Password for $ssid_selected:" -password)
        [[ -z "$password" ]] && { notify-send -i network-error "Connection Failed" "Password required."; exit 1; }

        # Connect with new password
        if timeout "$CONNECTION_TIMEOUT" nmcli device wifi connect "$(printf '%q' "$ssid_selected")" password "$(printf '%q' "$password")"; then
            notify-send -i network-wireless-connected "Connected" "Successfully connected to $ssid_selected."
            unset password
            exit
        else
            notify-send -i network-error "Connection Failed" "Failed to connect to $ssid_selected. Check password or signal strength."
            unset password
            exit 1
        fi
        ;;
esac
